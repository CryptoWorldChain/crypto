/* DO NOT EDIT THIS FILE - it is machine generated */
#include "icrypto_jni.h"
#include "icrypto.h"


/*
 * Class:     org_brewchain_core_crypto_jni_IPPCrypto
 * Method:    init
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_org_brewchain_core_crypto_jni_IPPCrypto_init
  (JNIEnv *, jobject){

  	printf("init!!");

  }

/*
 * Class:     org_brewchain_core_crypto_jni_IPPCrypto
 * Method:    genKeys
 * Signature: ([B[B[B)V
 */
JNIEXPORT void JNICALL Java_org_brewchain_core_crypto_jni_IPPCrypto_genKeys
  (JNIEnv *env, jobject obj, jbyteArray p, jbyteArray x, jbyteArray y){


	ICKeyPair256 kp;
   	genKeyPair(&kp);

	env->SetByteArrayRegion(p, 0,32	,(jbyte*)kp.p);
	env->SetByteArrayRegion(x, 0,32	,(jbyte*)kp.x);
	env->SetByteArrayRegion(y, 0,32	,(jbyte*)kp.y);

  }

JNIEXPORT jboolean JNICALL Java_org_brewchain_core_crypto_jni_IPPCrypto_fromPrikey
  (JNIEnv *env, jobject obj, jbyteArray p, jbyteArray x, jbyteArray y){

	ICKeyPair256 kp;
  	jbyte* jp =env->GetByteArrayElements(p, 0);
  	memcpy(kp.p,jp,32);

   	if(fromPriKey(&kp))
	{
		env->SetByteArrayRegion(x, 0,32	,(jbyte*)kp.x);
		env->SetByteArrayRegion(y, 0,32	,(jbyte*)kp.y);
		return true;
	}else{
		return false;
	}

  }
/*
 * Class:     org_brewchain_core_crypto_jni_IPPCrypto
 * Method:    signMessage
 * Signature: ([B[B[BLjava/lang/String;[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_org_brewchain_core_crypto_jni_IPPCrypto_signMessage
  (JNIEnv *env, jobject obj, jbyteArray p, jbyteArray x, jbyteArray y, jbyteArray msg, jbyteArray s, jbyteArray a){
  	
  	
  	jbyte* jp =env->GetByteArrayElements(p, 0);
	jbyte* jx =env->GetByteArrayElements(x, 0);
  	jbyte* jy =env->GetByteArrayElements(y, 0);
  	jbyte* jmsg = env->GetByteArrayElements(msg, 0);
  	ICKeyPair256 kp;
  	memcpy(kp.p,jp,32);
  	memcpy(kp.x,jx,32);
  	memcpy(kp.y,jy,32);
  	if(signMessage(&kp,(Ipp8u*)jmsg)){
  		env->SetByteArrayRegion(s, 0,32	,(jbyte*)kp.s);
		env->SetByteArrayRegion(a, 0,32	,(jbyte*)kp.a);
  		return true;
  	}



	return false;
  }

/*
 * Class:     org_brewchain_core_crypto_jni_IPPCrypto
 * Method:    verifyMessage
 * Signature: ([B[BLjava/lang/String;[B[B)Z
 */
JNIEXPORT jboolean JNICALL Java_org_brewchain_core_crypto_jni_IPPCrypto_verifyMessage
  (JNIEnv *env, jobject obj, jbyteArray x, jbyteArray y, jbyteArray msg, jbyteArray s, jbyteArray a){


  	jbyte* jx =env->GetByteArrayElements(x, 0);
  	jbyte* jy =env->GetByteArrayElements(y, 0);
  	jbyte* js =env->GetByteArrayElements(s, 0);
  	jbyte* ja =env->GetByteArrayElements(a, 0);
  	jbyte* jmsg = env->GetByteArrayElements(msg, 0);
  	ICKeyPair256 kp;
  	memcpy(kp.x,jx,32);
  	memcpy(kp.y,jy,32);
  	memcpy(kp.s,js,32);
  	memcpy(kp.a,ja,32);
  	if(verifyMessage(&kp,(Ipp8u*)jmsg)){
  		return true;
  	}
	return false;

  }
